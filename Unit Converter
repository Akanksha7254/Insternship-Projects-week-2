üöÄ Internship Week 2 - Temperature Converter üå°Ô∏è

Excited to share my progress on the MotionCut internship's second-week task! This week, I had the opportunity to work on a Unit Converter application in Python.

üìå In this project, I created a GUI-based Unit Converter with different conversion factors

üßê Here's a quick breakdown of the code:
- Prompt the user to enter a value and select the source and target units for conversion.
- Perform the conversion and display the result.
- Implement error handling to handle invalid inputs (e.g., non-numeric values, unsupported units).

#importing required modules
# Tkinter is the most commonly used method for performing GUI applications.It is a standard Python interface to the Tk GUI toolkit shipped with Python
#Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.
#To create a tkinter app: Importing the module ‚Äì tkinter

CODE: 

import tkinter as tk

def convert_units():         #Function to perform unit conversion
    try:
        value=float(input_entry.get())    #user input
        from_unit = from_unit_var.get()
        to_unit = to_unit_var.get()

        conversion_factors={
            "Meters to Feet" : 3.28084,     #defining conversion factors
            "Meters to Inches" : 39.3701,
            "Feet to Meters" : 0.3048,
            "Feet to Inches" : 12,
            "Inches to Meters" : 0.0254,
            "Inches tO Feet" : 0.0833
            }
        result = value * conversion_factors[f"{from_unit} to {to_unit}"]
        result_label.config(text=f"Result: {result:.2f} {to_unit}")
    except ValueError:
        result_label.config(text="Invalid input. Please enter a number.")

        
root = tk.Tk()  #create the main window,where root is the name of the main window object.
root.title("Unit Converter")


root.geometry("750x750") # set windoe size and background color
root.configure(bg="lightblue")


input_label = tk.Label(root,text="Enter Value:", bg="lightblue")  #create and configure widgets and set background color
input_label.grid(row=0, column=0,padx=10, pady=5)
input_entry = tk.Entry(root)
input_entry.grid(row=0, column=1, padx=10, pady=50)

from_unit_var = tk.StringVar()
from_unit_var.set("Meters")
from_unit_label = tk.Label(root, text="From Unit:", bg="lightblue")
from_unit_label.grid(row=1, column=0, padx=10, pady=50)
from_unit_menu = tk. OptionMenu(root, from_unit_var,"Meters", "Feet", "Inches")
from_unit_menu.grid(row=1, column=1, padx=10, pady=50)

to_unit_var = tk.StringVar()
to_unit_var.set("Feet")
to_unit_label = tk.Label(root, text="To Unit:", bg="lightblue")
to_unit_label.grid(row=2, column=0, padx=10, pady=5)
to_unit_menu = tk. OptionMenu(root, to_unit_var,"Meters", "Feet", "Inches")
to_unit_menu.grid(row=2, column=1, padx=10, pady=50)

convert_button = tk.Button(root, text="convert",command=convert_units, bg="green", fg="white")
convert_button.grid(row=3, column=0, columnspan=2, padx=10, pady=5)
result_label = tk.Label(root, text="Result:", bg="lightblue")
result_label.grid(row=4, column=0, columnspan=2, padx=10, pady=5)

root.mainloop() #start the main loop
